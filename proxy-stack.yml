version: "3.7"

networks:
  efk_network:
    driver: overlay
    driver_opts:
      encrypted: "true"
    external: true

  public_network:
    driver: overlay
    external: true

services:
  traefik:
    image: traefik:v2.2.8
    volumes:
      - "./traefik/letsencrypt:/letsencrypt"
      - "./traefik/traefik.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - efk_network
      - public_network
    logging:
      driver: fluentd
      options:
        fluentd-async-connect: "true"
        tag: traefik.access
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: udp
        mode: host
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=public_network"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        #
        - "traefik.http.routers.api.rule=Host(`traefik.theguardon.com`)"
        - "traefik.http.routers.api.entrypoints=web"
        - "traefik.http.routers.api.middlewares=redirect-to-https"
        # 
        - "traefik.http.services.dummy-svc.loadbalancer.server.port=8080"
        # 
        - "traefik.http.routers.api-secured.rule=Host(`traefik.theguardon.com`)"
        - "traefik.http.routers.api-secured.entrypoints=websecured"
        - "traefik.http.routers.api-secured.service=api@internal"
        - "traefik.http.routers.api-secured.tls=true"
        - "traefik.http.routers.api-secured.tls.certresolver=mytlschallenge"

        # Username & Password: (deployer | 1qazxsw2)
        - "traefik.http.routers.api-secured.middlewares=auth"
        - "traefik.http.middlewares.auth.basicauth.users=deployer:$$apr1$$YC72QMpN$$/SEGFLFkpRDa065tAWuRZ/"
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
