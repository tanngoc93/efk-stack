version: "3.7"

networks:
  private_network:
    driver: overlay
    attachable: true

  efk_network:
    driver: overlay
    driver_opts:
      encrypted: "true"
    external: true

  public_network:
    driver: overlay
    external: true

services:
  frontend:
    image: tanngoc93/efk-frontend:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      API_HOST: "https://backend.${DOMAIN}"
    networks:
      - efk_network
      - private_network
      - public_network
    depends_on:
      - db
      - backend
    logging:
      driver: "fluentd"
      options:
        fluentd-async-connect: "true"
        tag: frontend.access
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=public_network"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        #
        - "traefik.http.routers.frontend-http.rule=Host(`${DOMAIN}`)"
        - "traefik.http.routers.frontend-http.entrypoints=web"
        - "traefik.http.routers.frontend-http.middlewares=redirect-to-https"
        # 
        - "traefik.http.services.frontend-svc.loadbalancer.server.port=80"
        # 
        - "traefik.http.routers.frontend-https.rule=Host(`${DOMAIN}`)"
        - "traefik.http.routers.frontend-https.entrypoints=websecured"
        - "traefik.http.routers.frontend-https.tls=true"
        - "traefik.http.routers.frontend-https.tls.certresolver=mytlschallenge"
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any

  backend:
    image: tanngoc93/efk-backend:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DB_PORT: 5432
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_FOR_PROD: postgresdb
      RAILS_ENV: production
      RACK_ENV: production
    networks:
      - efk_network
      - private_network
      - public_network
    depends_on:
      - db
    logging:
      driver: fluentd
      options:
        fluentd-async-connect: "true"
        tag: backend.access
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=public_network"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        #
        - "traefik.http.routers.backend.rule=Host(`backend.${DOMAIN}`)"
        - "traefik.http.routers.backend.entrypoints=web"
        - "traefik.http.routers.backend.middlewares=redirect-to-https"
        # 
        - "traefik.http.services.backend-svc.loadbalancer.server.port=80"
        # 
        - "traefik.http.routers.backend-secured.rule=Host(`backend.${DOMAIN}`)"
        - "traefik.http.routers.backend-secured.entrypoints=websecured"
        - "traefik.http.routers.backend-secured.tls=true"
        - "traefik.http.routers.backend-secured.tls.certresolver=mytlschallenge"
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any

  db:
    image: postgres:11.4
    volumes:
      -  /var/run/docker.sock:/var/run/docker.sock
      - ./pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgresdb
    networks:
      - efk_network
      - private_network
    logging:
      driver: fluentd
      options:
        fluentd-async-connect: "true"
        tag: db.access
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=false
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
